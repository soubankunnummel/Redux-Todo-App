{"version":3,"sources":["Redux/todoReducer.js","components/AddTodoForm.js","components/TodoItem.js","components/TodoList.js","components/TotalCompleteItems.js","App.js","Redux/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","push","id","Date","now","text","payload","completed","Delete","console","log","filter","todo","Edit","find","ToggleCompleted","actions","AddTodoForm","dispatch","useDispatch","useState","value","setValue","onSubmit","event","preventDefault","trim","alert","className","type","placeholder","onChange","target","TodoItem","title","inputRef","useRef","edit","setEdit","editingTodoId","setEditingTodoId","useEffect","current","focus","checked","onClick","style","border","outline","e","onKeyDown","key","handlSaveEdit","ref","handlDelet","marginLeft","handlEdit","TodoList","todos","useSelector","map","TotalCompleteItems","completedTaskCount","length","count","App","store","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aAAc,GACdC,SAAU,CACRC,QAAS,SAACC,EAAOC,GAEfD,EAAME,KAAK,CACTC,GAAIC,KAAKC,MACTC,KAAML,EAAOM,QACbC,WAAW,KAGfC,OAAQ,SAACT,EAAOC,GAEZ,OADAS,QAAQC,IAAIV,EAAOM,SACZP,EAAMY,QAAO,SAACC,GAAD,OAAUA,EAAKV,KAAOF,EAAOM,YAGrDO,KAAM,SAACd,EAAMC,GAAY,IAAD,EACFA,EAAOM,QAAlBJ,EADa,EACbA,GAAGG,EADU,EACVA,KACJO,EAAOb,EAAMe,MAAK,SAACF,GAAD,OAAUA,EAAKV,KAAOA,KAC3CU,IACCA,EAAKP,KAAOA,IAIpBU,gBAAiB,SAAChB,EAAOC,GAEvB,IAAMY,EAAOb,EAAMe,MAAK,SAACF,GAAD,OAAUA,EAAKV,KAAOF,EAAOM,WACjDM,IACFA,EAAKL,WAAaK,EAAKL,e,EAOyBd,EAAUuB,QAAnDlB,E,EAAAA,QAAQU,E,EAAAA,OAAQK,E,EAAAA,KAAME,E,EAAAA,gBACtBtB,IAAf,Q,OCIewB,EAvCK,WAEnB,IAAMC,EAAWC,cAFQ,EAGCC,mBAAS,IAHV,mBAGlBC,EAHkB,KAGXC,EAHW,KAoBzB,OACC,uBAAMC,SAfU,SAACC,GACjBA,EAAMC,iBACDJ,EAAMK,QAKXR,EAASpB,EAAQuB,IACjBC,EAAS,IACTb,QAAQC,IAAI,iBAAmBW,IAL9BM,MAAM,2CAWmBC,UAAU,wBAApC,UACC,uBAAOA,UAAU,UAAjB,kBACA,uBACCC,KAAK,OACLD,UAAU,4BACVE,YAAY,cACZT,MAAOA,EACPU,SAAU,SAACP,GAAD,OAAWF,EAASE,EAAMQ,OAAOX,UAG5C,wBAAQQ,KAAK,SAASD,UAAU,uBAAhC,wBC8CYK,EA7EE,SAAC,GAA8B,IAA5B/B,EAA2B,EAA3BA,GAAIgC,EAAuB,EAAvBA,MAAO3B,EAAgB,EAAhBA,UAGvB4B,EAAWC,iBAAO,MAClBlB,EAAWC,cAJ4B,EAKrBC,mBAAS,IALY,mBAKtCiB,EALsC,KAKhCC,EALgC,OAMHlB,mBAAS,MANN,mBAMtCmB,EANsC,KAMvBC,EANuB,KAmC7C,OANAC,qBAAU,WACU,OAAlBF,GAA0BJ,EAASO,SACrCP,EAASO,QAAQC,UAEf,CAACJ,IAGD,oBAAIX,UAAS,0BAAqBrB,GAAa,2BAA/C,SACE,sBAAKqB,UAAU,iCAAf,UACE,uBAAMA,UAAU,4BAAhB,UACE,uBAAOC,KAAK,WAAWD,UAAU,OAAOgB,QAASrC,EAAWsC,QAhB9C,WACpBpC,QAAQC,IAAI,oBACfQ,EAASH,EAAgBb,OAefqC,IAAkBrC,EAC1B,mCAGS,uBACE4C,MAAO,CAAEC,OAAQ,OAAOC,QAAQ,QAChCnB,KAAK,OACLR,MAAOgB,EACPN,SAAU,SAACkB,GAAD,OAAOX,EAAQW,EAAEjB,OAAOX,QAClC6B,UAAW,SAACD,GACI,UAAVA,EAAEE,KAjCE,SAACjD,EAAIG,GACzBa,EAASL,EAAK,CAAEX,KAAIG,UACpBmC,EAAiB,MACjBF,EAAQ,IA+BMc,CAAclD,EAAImC,IAEtBgB,IAAKlB,MAIPD,KAGJ,sBAAKN,UAAU,GAAf,UACE,wBAAQA,UAAU,kBAAkBiB,QAAS,kBArDlC,SAAC3C,GAClBgB,EAASV,EAAON,IAoDyCoD,CAAWpD,IAA9D,oBAGA,wBACE0B,UAAU,mBACVkB,MAAO,CAAES,WAAY,GACrBV,QAAS,kBAvDD,SAAC3C,GACjBsC,EAAiBtC,GACjBoC,EAAQJ,GAqDesB,CAAUtD,IAH3B,2BC/CKuD,EAjBE,WAChB,IAAMC,EAAQC,aAAY,SAAC5D,GAAD,OAAWA,EAAMsB,SAI3C,OAHAZ,QAAQC,IAAIgD,GAIX,oBAAI9B,UAAU,aAAd,SACE8B,EAAME,KAAI,SAAChD,GAAD,OACV,8BAEA,cAAC,EAAD,CAAUV,GAAIU,EAAKV,GAAIgC,MAAOtB,EAAKP,KAAME,UAAWK,EAAKL,aAF/CK,EAAKV,UCCJ2D,EAVY,WAC1B,IACMC,EADQH,aAAY,SAAC5D,GAAD,OAAWA,EAAMsB,SACVV,QAAO,SAACC,GAAD,OAAUA,EAAKL,aAAWwD,OAElEtD,QAAQC,IAAIoD,GAEZ,IAAME,EAAQF,EACd,OAAO,qBAAIlC,UAAU,OAAd,4CAA8CoC,GAA9C,QCOOC,EAXH,WACX,OACC,sBAAKrC,UAAU,8BAAf,UACC,8CACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCEYsC,EARDC,YAAe,CACzBC,QAAS,CACL/C,MAAOgD,KCDfC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGDO,SAASC,eAAe,W","file":"static/js/main.f81e2bac.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      // Use immer to update the state immutably\r\n      state.push({\r\n        id: Date.now(),\r\n        text: action.payload, \r\n        completed: false,\r\n      });\r\n    },\r\n    Delete: (state, action) => { \r\n        console.log(action.payload); \r\n        return state.filter((todo) => todo.id !== action.payload)\r\n\r\n    },\r\n    Edit: (state,action) => {\r\n        const {id,text} = action.payload\r\n        const todo = state.find((todo) => todo.id === id)\r\n        if(todo){\r\n            todo.text = text\r\n        }\r\n\r\n    },\r\n    ToggleCompleted: (state, action) => {\r\n     \r\n      const todo = state.find((todo) => todo.id === action.payload);\r\n      if (todo) {\r\n        todo.completed = !todo.completed;\r\n        }\r\n      }\r\n      \r\n  },\r\n});\r\n\r\nexport const { addTodo,Delete, Edit, ToggleCompleted} = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTodo } from '../Redux/todoReducer';\r\n\r\nconst AddTodoForm = () => {\r\n\t\r\n\tconst dispatch = useDispatch()\r\n\tconst [value, setValue] = useState('');\r\n \r\n\r\n\tconst onSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!value.trim()) {\r\n\t\t\t// Prevent adding an empty task\r\n\t\t\talert('Please enter a task before submitting.')\r\n\t\t\treturn;\r\n\t\t  }\r\n\t\tdispatch(addTodo(value))\r\n\t\tsetValue('')\r\n\t\tconsole.log('user entered: ' + value); \r\n\t\t\r\n\t\t\r\n\t}; \r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit} className='form-inline mt-3 mb-3'>\r\n\t\t\t<label className='sr-only'>Name</label>\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tclassName='form-control mb-2 mr-sm-2'\r\n\t\t\t\tplaceholder='Add todo...'\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(event) => setValue(event.target.value)}\r\n\t\t\t></input>\r\n\r\n\t\t\t<button type='submit' className='btn btn-primary mb-2'>\r\n\t\t\t\tSubmit\r\n\t\t\t</button>\r\n\t\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default AddTodoForm;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Delete, Edit, ToggleCompleted } from '../Redux/todoReducer';\r\n\r\nconst TodoItem = ({ id, title, completed }) => {\r\n\r\n  \r\n  const inputRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const [edit, setEdit] = useState(''); \r\n  const [editingTodoId, setEditingTodoId] = useState(null);\r\n \r\n  const handlDelet = (id) => {\r\n    dispatch(Delete(id));\r\n  };\r\n\r\n  const handlEdit = (id) => {\r\n    setEditingTodoId(id); // Activate editing for this task\r\n    setEdit(title); // Set the input field value to the current task title\r\n  };\r\n\r\n  const handlSaveEdit = (id, text) => {\r\n    dispatch(Edit({ id, text })); // Update the task with the edited text\r\n    setEditingTodoId(null);\r\n    setEdit('');\r\n    \r\n  };\r\n  const handlCheckbox = () => {\r\n    console.log(\"chek box clicked\");\r\n\tdispatch(ToggleCompleted(id))\r\n\r\n  }\r\n\r\n  useEffect(()=> {\r\n\tif(editingTodoId !== null && inputRef.current){\r\n\t\tinputRef.current.focus()\r\n\t}\r\n  },[editingTodoId])\r\n\r\n  return (\r\n    <li className={`list-group-item ${completed && 'list-group-item-success'}`}>\r\n      <div className='d-flex justify-content-between'>\r\n        <span className='d-flex align-items-center'>\r\n          <input type='checkbox' className='mr-3' checked={completed} onClick={ handlCheckbox}></input>\r\n          {editingTodoId === id ? (\r\n\t\t\t<>\r\n\r\n\t\t\t\r\n            <input\r\n              style={{ border: 'none',outline:'none' }}\r\n              type='text'\r\n              value={edit}\r\n              onChange={(e) => setEdit(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handlSaveEdit(id, edit);\r\n                }}}\r\n              ref={inputRef} // Set the ref attribute to inputRef\r\n            />\r\n\t\t\t</>\r\n          ) : (\r\n            title\r\n          )}\r\n        </span>\r\n        <div className=''>\r\n          <button className='btn btn-danger ' onClick={() => handlDelet(id)}>\r\n            Delete\r\n          </button>\r\n          <button\r\n            className='btn btn-primary '\r\n            style={{ marginLeft: 3 }}\r\n            onClick={() => handlEdit(id)}\r\n          >\r\n            Edit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst TodoList = () => {\r\n\tconst todos = useSelector((state) => state.value )\r\n\tconsole.log(todos);\r\n\r\n\r\n\treturn (\r\n\t\t<ul className='list-group' >\r\n\t\t\t{todos.map((todo) => (\r\n\t\t\t\t<div key={todo.id}>\r\n\r\n\t\t\t\t<TodoItem id={todo.id} title={todo.text} completed={todo.completed} />\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst TotalCompleteItems = () => {\r\n\tconst todos = useSelector((state) => state.value)\r\n\tconst completedTaskCount = todos.filter((todo) => todo.completed).length;\r\n\r\n\tconsole.log(completedTaskCount);\r\n\t\r\n\tconst count = completedTaskCount\r\n\treturn <h4 className='mt-3'>Total Complete Items:{`${count}`} </h4>;\r\n};\r\n\r\nexport default TotalCompleteItems;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport AddTodoForm from './components/AddTodoForm';\r\nimport TodoList from './components/TodoList';\r\nimport TotalCompleteItems from './components/TotalCompleteItems';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className='container bg-white p-4 mt-5'>\r\n\t\t\t<h1>My Todo List</h1>\r\n\t\t\t<AddTodoForm />\r\n\t\t\t<TodoList />\r\n\t\t\t<TotalCompleteItems />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import todoReducer from \"./todoReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        value: todoReducer\r\n        \r\n    }\r\n})\r\n\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/store';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}